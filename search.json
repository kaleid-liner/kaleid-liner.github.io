[
  
    {
      "title"    : ".NET Core Devirtualization Under the Hood",
      "category" : "",
      "tags"     : "dotnet, devirtualization",
      "url"      : "/blog/2019/12/11/devirt.html",
      "date"     : "Dec 11, 2019",
      "excerpt"  : "对于几乎所有支持继承等 OOP 特性的语言，调用虚方法的额外消耗都是一件令人头疼的事情。许多时候，对于一些常被调用但实现简单的方法，调用产生的 overhead 甚至超过了函数体本身……而在 C# 中，Devirtualization 也十分重要。因为 C# 对虚方法调用的实现方式决定了其额外消耗更大。这篇文档会先介绍 C# 虚方法的调用方式，再介绍 C# 采用的 devirt 技术。",
      "read_time"  : "15 minutes"
    } ,
  
    {
      "title"    : "Hello World",
      "category" : "",
      "tags"     : "hello-world, lorem-ipsum",
      "url"      : "/blog/2019/06/02/hello-world.html",
      "date"     : "Jun 02, 2019",
      "excerpt"  : "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Nulla facilisi morbi tempus iaculis urna. Nulla facilisi etiam dignissim diam quis enim. Viverra vitae congue eu consequat ac felis donec et. Ornare arcu dui vivamus arcu felis bibendum. Neque convallis a cras semper. Et tortor consequat id porta. Cras tincidunt lobortis feugiat vivamus at augue eget arcu dictum.\n",
      "read_time"  : "3 minutes"
    } ,
  
    {
      "title"    : "Concurrent HTTP Server with Epoll",
      "category" : "",
      "tags"     : "linux, epoll, c, http, concurrency",
      "url"      : "/blog/2019/06/02/epoll-web-server.html",
      "date"     : "Jun 02, 2019",
      "excerpt"  : "Several days ago, my Operating System class assigned a lab, to write a concurrent http server. I finally decide to complete this lab in C and using epoll to implement I/O multiplexing. It turns out that epoll is really hard to use, especially in multithreaded environments. So I write this post to document some pitfalls while using epoll. The source code of the HTTP Server can be found at here.\n",
      "read_time"  : "11 minutes"
    } 
  
]